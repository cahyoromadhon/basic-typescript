import { Transaction, TransactionObjectInput } from '@mysten/sui/transactions';
import type { SuiClient, SuiObjectRef } from '@mysten/sui/client';
import type { Keypair } from '@mysten/sui/cryptography';
import type { SuiTxArg, SuiAddressArg, SuiObjectArg, SuiVecTxArg, SuiAmountsArg } from 'src/types';
import type { bcs } from '@mysten/sui/bcs';
export declare class SuiTxBlock {
    txBlock: Transaction;
    constructor(transaction?: Transaction);
    get gas(): {
        $kind: "GasCoin";
        GasCoin: true;
    };
    /** @deprecated Use `getData()` instead. */
    get blockData(): {
        version: 1;
        inputs: ({
            kind: "Input";
            value: unknown;
            index: number;
            type?: "object" | undefined;
        } | {
            type: "pure";
            kind: "Input";
            value: unknown;
            index: number;
        })[];
        transactions: ({
            typeArguments: string[];
            arguments: ({
                kind: "Input";
                value: unknown;
                index: number;
                type?: "object" | undefined;
            } | {
                type: "pure";
                kind: "Input";
                value: unknown;
                index: number;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            })[];
            kind: "MoveCall";
            target: `${string}::${string}::${string}`;
        } | {
            address: {
                kind: "Input";
                value: unknown;
                index: number;
                type?: "object" | undefined;
            } | {
                type: "pure";
                kind: "Input";
                value: unknown;
                index: number;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            };
            objects: ({
                kind: "Input";
                value: unknown;
                index: number;
                type?: "object" | undefined;
            } | {
                type: "pure";
                kind: "Input";
                value: unknown;
                index: number;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            })[];
            kind: "TransferObjects";
        } | {
            coin: {
                kind: "Input";
                value: unknown;
                index: number;
                type?: "object" | undefined;
            } | {
                type: "pure";
                kind: "Input";
                value: unknown;
                index: number;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            };
            amounts: ({
                kind: "Input";
                value: unknown;
                index: number;
                type?: "object" | undefined;
            } | {
                type: "pure";
                kind: "Input";
                value: unknown;
                index: number;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            })[];
            kind: "SplitCoins";
        } | {
            destination: {
                kind: "Input";
                value: unknown;
                index: number;
                type?: "object" | undefined;
            } | {
                type: "pure";
                kind: "Input";
                value: unknown;
                index: number;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            };
            sources: ({
                kind: "Input";
                value: unknown;
                index: number;
                type?: "object" | undefined;
            } | {
                type: "pure";
                kind: "Input";
                value: unknown;
                index: number;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            })[];
            kind: "MergeCoins";
        } | {
            objects: ({
                kind: "Input";
                value: unknown;
                index: number;
                type?: "object" | undefined;
            } | {
                type: "pure";
                kind: "Input";
                value: unknown;
                index: number;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            })[];
            type: {
                Some: import("@mysten/sui/dist/cjs/bcs/types").TypeTag;
            } | {
                None: true | null;
            };
            kind: "MakeMoveVec";
        } | {
            modules: number[][];
            dependencies: string[];
            kind: "Publish";
        } | {
            modules: number[][];
            dependencies: string[];
            ticket: {
                kind: "Input";
                value: unknown;
                index: number;
                type?: "object" | undefined;
            } | {
                type: "pure";
                kind: "Input";
                value: unknown;
                index: number;
            } | {
                kind: "GasCoin";
            } | {
                kind: "Result";
                index: number;
            } | {
                kind: "NestedResult";
                index: number;
                resultIndex: number;
            };
            kind: "Upgrade";
            packageId: string;
        })[];
        gasConfig: {
            payment?: {
                version: string | number | bigint;
                objectId: string;
                digest: string;
            }[] | undefined;
            owner?: string | undefined;
            price?: string | number | bigint | undefined;
            budget?: string | number | bigint | undefined;
        };
        sender?: string | undefined;
        expiration?: {
            Epoch: number;
        } | {
            None: true | null;
        } | null | undefined;
    };
    get getData(): {
        version: 2;
        inputs: import("@mysten/bcs").EnumOutputShapeWithKeys<{
            Object: import("@mysten/bcs").EnumOutputShapeWithKeys<{
                ImmOrOwnedObject: {
                    version: string | number;
                    objectId: string;
                    digest: string;
                };
                SharedObject: {
                    objectId: string;
                    initialSharedVersion: string | number;
                    mutable: boolean;
                };
                Receiving: {
                    version: string | number;
                    objectId: string;
                    digest: string;
                };
            }, "ImmOrOwnedObject" | "SharedObject" | "Receiving">;
            Pure: {
                bytes: string;
            };
            UnresolvedPure: {
                value: unknown;
            };
            UnresolvedObject: {
                objectId: string;
                version?: string | number | null | undefined;
                digest?: string | null | undefined;
                initialSharedVersion?: string | number | null | undefined;
            };
        }, "Pure" | "Object" | "UnresolvedPure" | "UnresolvedObject">[];
        commands: import("@mysten/bcs").EnumOutputShapeWithKeys<{
            MoveCall: {
                function: string;
                module: string;
                package: string;
                typeArguments: string[];
                arguments: ({
                    $kind: "GasCoin";
                    GasCoin: true;
                } | {
                    $kind: "Input";
                    Input: number;
                    type?: "pure";
                } | {
                    $kind: "Input";
                    Input: number;
                    type?: "object";
                } | {
                    $kind: "Result";
                    Result: number;
                } | {
                    $kind: "NestedResult";
                    NestedResult: [number, number];
                })[];
                _argumentTypes?: {
                    ref: "&" | "&mut" | null;
                    body: import("@mysten/sui/dist/cjs/transactions/data/internal").OpenMoveTypeSignatureBody;
                }[] | null | undefined;
            };
            TransferObjects: {
                address: {
                    $kind: "GasCoin";
                    GasCoin: true;
                } | {
                    $kind: "Input";
                    Input: number;
                    type?: "pure";
                } | {
                    $kind: "Input";
                    Input: number;
                    type?: "object";
                } | {
                    $kind: "Result";
                    Result: number;
                } | {
                    $kind: "NestedResult";
                    NestedResult: [number, number];
                };
                objects: ({
                    $kind: "GasCoin";
                    GasCoin: true;
                } | {
                    $kind: "Input";
                    Input: number;
                    type?: "pure";
                } | {
                    $kind: "Input";
                    Input: number;
                    type?: "object";
                } | {
                    $kind: "Result";
                    Result: number;
                } | {
                    $kind: "NestedResult";
                    NestedResult: [number, number];
                })[];
            };
            SplitCoins: {
                coin: {
                    $kind: "GasCoin";
                    GasCoin: true;
                } | {
                    $kind: "Input";
                    Input: number;
                    type?: "pure";
                } | {
                    $kind: "Input";
                    Input: number;
                    type?: "object";
                } | {
                    $kind: "Result";
                    Result: number;
                } | {
                    $kind: "NestedResult";
                    NestedResult: [number, number];
                };
                amounts: ({
                    $kind: "GasCoin";
                    GasCoin: true;
                } | {
                    $kind: "Input";
                    Input: number;
                    type?: "pure";
                } | {
                    $kind: "Input";
                    Input: number;
                    type?: "object";
                } | {
                    $kind: "Result";
                    Result: number;
                } | {
                    $kind: "NestedResult";
                    NestedResult: [number, number];
                })[];
            };
            MergeCoins: {
                destination: {
                    $kind: "GasCoin";
                    GasCoin: true;
                } | {
                    $kind: "Input";
                    Input: number;
                    type?: "pure";
                } | {
                    $kind: "Input";
                    Input: number;
                    type?: "object";
                } | {
                    $kind: "Result";
                    Result: number;
                } | {
                    $kind: "NestedResult";
                    NestedResult: [number, number];
                };
                sources: ({
                    $kind: "GasCoin";
                    GasCoin: true;
                } | {
                    $kind: "Input";
                    Input: number;
                    type?: "pure";
                } | {
                    $kind: "Input";
                    Input: number;
                    type?: "object";
                } | {
                    $kind: "Result";
                    Result: number;
                } | {
                    $kind: "NestedResult";
                    NestedResult: [number, number];
                })[];
            };
            Publish: {
                modules: string[];
                dependencies: string[];
            };
            MakeMoveVec: {
                type: string | null;
                elements: ({
                    $kind: "GasCoin";
                    GasCoin: true;
                } | {
                    $kind: "Input";
                    Input: number;
                    type?: "pure";
                } | {
                    $kind: "Input";
                    Input: number;
                    type?: "object";
                } | {
                    $kind: "Result";
                    Result: number;
                } | {
                    $kind: "NestedResult";
                    NestedResult: [number, number];
                })[];
            };
            Upgrade: {
                package: string;
                modules: string[];
                dependencies: string[];
                ticket: {
                    $kind: "GasCoin";
                    GasCoin: true;
                } | {
                    $kind: "Input";
                    Input: number;
                    type?: "pure";
                } | {
                    $kind: "Input";
                    Input: number;
                    type?: "object";
                } | {
                    $kind: "Result";
                    Result: number;
                } | {
                    $kind: "NestedResult";
                    NestedResult: [number, number];
                };
            };
            $Intent: {
                name: string;
                inputs: {
                    [x: string]: {
                        $kind: "GasCoin";
                        GasCoin: true;
                    } | {
                        $kind: "Input";
                        Input: number;
                        type?: "pure";
                    } | {
                        $kind: "Input";
                        Input: number;
                        type?: "object";
                    } | {
                        $kind: "Result";
                        Result: number;
                    } | {
                        $kind: "NestedResult";
                        NestedResult: [number, number];
                    } | ({
                        $kind: "GasCoin";
                        GasCoin: true;
                    } | {
                        $kind: "Input";
                        Input: number;
                        type?: "pure";
                    } | {
                        $kind: "Input";
                        Input: number;
                        type?: "object";
                    } | {
                        $kind: "Result";
                        Result: number;
                    } | {
                        $kind: "NestedResult";
                        NestedResult: [number, number];
                    })[];
                };
                data: {
                    [x: string]: unknown;
                };
            };
        }, "MoveCall" | "TransferObjects" | "SplitCoins" | "MergeCoins" | "Publish" | "MakeMoveVec" | "Upgrade" | "$Intent">[];
        gasData: {
            payment: {
                version: string | number;
                objectId: string;
                digest: string;
            }[] | null;
            owner: string | null;
            price: string | number | null;
            budget: string | number | null;
        };
        sender?: string | null | undefined;
        expiration?: import("@mysten/bcs").EnumOutputShapeWithKeys<{
            None: true;
            Epoch: string | number;
        }, "None" | "Epoch"> | null | undefined;
    };
    address(value: string): {
        $kind: "GasCoin";
        GasCoin: true;
    } | {
        $kind: "Input";
        Input: number;
        type?: "pure";
    } | {
        $kind: "Input";
        Input: number;
        type?: "object";
    } | {
        $kind: "Result";
        Result: number;
    } | {
        $kind: "NestedResult";
        NestedResult: [number, number];
    };
    get pure(): typeof this.txBlock.pure;
    object(value: string | TransactionObjectInput): {
        $kind: "Input";
        Input: number;
        type?: "object";
    };
    objectRef(ref: SuiObjectRef): {
        $kind: "Input";
        Input: number;
        type?: "object";
    };
    sharedObjectRef(ref: typeof bcs.SharedObjectRef.$inferType): {
        $kind: "Input";
        Input: number;
        type?: "object";
    };
    setSender(sender: string): void;
    setSenderIfNotSet(sender: string): void;
    setExpiration(expiration?: Parameters<typeof this.txBlock.setExpiration>[0]): void;
    setGasPrice(price: number | bigint): void;
    setGasBudget(budget: number | bigint): void;
    setGasOwner(owner: string): void;
    setGasPayment(payments: SuiObjectRef[]): void;
    /**
     * @deprecated Use toJSON instead.
     * For synchronous serialization, you can use `getData()`
     * */
    serialize(): string;
    toJSON(): Promise<string>;
    sign(params: {
        signer: Keypair;
        client?: SuiClient;
        onlyTransactionKind?: boolean;
    }): Promise<import("@mysten/sui/cryptography").SignatureWithBytes>;
    build(params?: {
        client?: SuiClient;
        onlyTransactionKind?: boolean;
    }): Promise<Uint8Array>;
    getDigest(params?: {
        client?: SuiClient;
    }): Promise<string>;
    add(...args: Parameters<typeof this.txBlock.add>): unknown;
    publish({ modules, dependencies, }: {
        modules: number[][] | string[];
        dependencies: string[];
    }): import("@mysten/sui/transactions").TransactionResult;
    upgrade(...args: Parameters<typeof this.txBlock.upgrade>): import("@mysten/sui/transactions").TransactionResult;
    makeMoveVec(...args: Parameters<typeof this.txBlock.makeMoveVec>): import("@mysten/sui/transactions").TransactionResult;
    transferObjects(objects: SuiObjectArg[], address: SuiAddressArg): import("@mysten/sui/transactions").TransactionResult;
    splitCoins(coin: SuiObjectArg, amounts: SuiAmountsArg[]): {
        $kind: "NestedResult";
        NestedResult: [number, number];
    }[];
    mergeCoins(destination: SuiObjectArg, sources: SuiObjectArg[]): import("@mysten/sui/transactions").TransactionResult;
    /**
     * @description Move call
     * @param target `${string}::${string}::${string}`, e.g. `0x3::sui_system::request_add_stake`
     * @param args the arguments of the move call, such as `['0x1', '0x2']`
     * @param typeArgs the type arguments of the move call, such as `['0x2::sui::SUI']`
     */
    moveCall(target: string, args?: (SuiTxArg | SuiVecTxArg)[], typeArgs?: string[]): import("@mysten/sui/transactions").TransactionResult;
    transferSuiToMany(recipients: SuiAddressArg[], amounts: SuiAmountsArg[]): this;
    transferSui(address: SuiAddressArg, amount: SuiAmountsArg): this;
    takeAmountFromCoins(coins: SuiObjectArg[], amount: SuiAmountsArg): import("@mysten/sui/transactions").TransactionObjectArgument[];
    splitSUIFromGas(amounts: SuiAmountsArg[]): {
        $kind: "Result";
        Result: number;
    } & {
        $kind: "NestedResult";
        NestedResult: [number, number];
    }[];
    splitMultiCoins(coins: SuiObjectArg[], amounts: SuiAmountsArg[]): {
        splitedCoins: {
            $kind: "Result";
            Result: number;
        } & {
            $kind: "NestedResult";
            NestedResult: [number, number];
        }[];
        mergedCoin: import("@mysten/sui/transactions").TransactionObjectArgument;
    };
    transferCoinToMany(coins: SuiObjectArg[], sender: SuiAddressArg, recipients: SuiAddressArg[], amounts: SuiAmountsArg[]): this;
    transferCoin(coins: SuiObjectArg[], sender: SuiAddressArg, recipient: SuiAddressArg, amount: SuiAmountsArg): this;
    stakeSui(amount: SuiAmountsArg, validatorAddr: SuiAddressArg): import("@mysten/sui/transactions").TransactionResult;
}
