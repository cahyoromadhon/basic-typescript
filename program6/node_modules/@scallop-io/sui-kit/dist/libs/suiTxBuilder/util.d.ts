import type { TransactionArgument, Transaction, TransactionObjectArgument } from '@mysten/sui/transactions';
import type { SuiObjectArg, SuiAddressArg, SuiTxArg, SuiVecTxArg, SuiInputTypes, SuiAmountsArg } from 'src/types';
export declare const getDefaultSuiInputType: (value: SuiTxArg) => "u64" | "bool" | "object" | undefined;
/**
 * Since we know the elements in the array are the same type
 * If type is not provided, we will try to infer the type from the first element
 * By default,
 *
 * string is hex and its length equal to 32 =====> object id
 * number, bigint ====> u64
 * boolean =====> bool
 *
 * If type is provided, we will use the type to convert the array
 * @param args
 * @param type 'address' | 'bool' | 'u8' | 'u16' | 'u32' | 'u64' | 'u128' | 'u256' | 'signer' | 'object' | string
 */
export declare function makeVecParam(txBlock: Transaction, args: SuiTxArg[], type?: SuiInputTypes): TransactionArgument;
/**
 * Convert any valid input into array of TransactionArgument.
 *
 * @param txb The Transaction Block
 * @param args The array of argument to convert.
 * @returns The converted array of TransactionArgument.
 */
export declare function convertArgs(txBlock: Transaction, args: (SuiTxArg | SuiVecTxArg)[]): TransactionArgument[];
/**
 * Convert any valid address input into a TransactionArgument.
 *
 * @param txb The Transaction Block
 * @param arg The address argument to convert.
 * @returns The converted TransactionArgument.
 */
export declare function convertAddressArg(txBlock: Transaction, arg: SuiAddressArg): SuiTxArg;
/**
 * Convert any valid object input into a TransactionArgument.
 *
 * @param txb The Transaction Block
 * @param arg The object argument to convert.
 * @returns The converted TransactionArgument.
 */
export declare function convertObjArg(txb: Transaction, arg: SuiObjectArg): TransactionObjectArgument;
export declare function convertAmounts(txBlock: Transaction, amounts: SuiAmountsArg[]): TransactionArgument[];
export declare const partitionArray: <T>(array: T[], chunkSize: number) => T[][];
